# Import in variables from autoconf
override CC := @KERNEL_CC@
override LD := @KERNEL_LD@
override ARCH := @ARCH@
override SCDIR := @srcdir@/src
override CFLAGS := @CFLAGS@
override BUILD_DIR := @BUILDDIR@
override SOURCE_DIR := @srcdir@
override VERSION := @PACKAGE_VERSION@

# Silent by default
ifeq ($(V),)
.SILENT:
endif

# Gather the kernel cflags/sources
override kern_SOURCES := $(SCDIR)/kern/init.c   \
                         $(SCDIR)/lib/print.c   \
                         $(SCDIR)/lib/panic.c   \
                         $(SCDIR)/lib/libc.c    \
                         $(SCDIR)/lib/cmdline.c \
			 $(SCDIR)/dev/console.c

override KCFLAGS := $(CFLAGS)                  \
                    -std=gnu11                 \
                    -ffreestanding             \
                    -fpic                      \
                    -Wno-attributes            \
                    -MMD                       \
                    -mno-red-zone              \
		    -I @srcdir@/include        \
		    -I $(BUILD_DIR)/.tmpinc    \
                    -fno-omit-frame-pointer
override KLINKFLAGS := -nostdlib

# Make arch-specific modifications
ifeq ($(ARCH),aarch64)
	override KCFLAGS += -mgeneral-regs-only
	override KLINKFLAGS += -zmax-page-size=0x10000
	override CLANG_TARGET := aarch64-unknown-none-elf

	override asm_SOURCES := $(SCDIR)/arch/aarch64/stubs.S
	override kern_SOURCES += $(SCDIR)/arch/aarch64/trap.c
else ifeq ($(ARCH), x86_64)
	override KCFLAGS += -mno-80387                 \
                            -mno-mmx                   \
                            -mno-3dnow                 \
                            -mno-sse                   \
                            -mno-sse2
	override KLINKFLAGS += -zmax-page-size=0x1000
	override CLANG_TARGET := x86_64-unknown-none-elf
	
	override asm_SOURCES := $(SCDIR)/arch/x86_64/stubs.S
	override kern_SOURCES += $(SCDIR)/arch/x86_64/trap.c
endif


# Add special case for clang/hardened builds
ifeq ($(CC),clang)
	override KCFLAGS += -target $(CLANG_TARGET)
endif
ifeq (@SECURE_BUILD@,yes)
	override KCFLAGS += -DSECURE_BUILD=1 -fsanitize=undefined
endif

# Build artifacts
override KERNEL  := $(BUILD_DIR)/nxkern
override IMAGE   := $(BUILD_DIR)/ninex.hdd
override OBJECTS := $(addprefix $(BUILD_DIR), $(patsubst %.c, %.o, $(kern_SOURCES:$(SOURCE_DIR)%=%)))
override OBJECTS += $(addprefix $(BUILD_DIR), $(patsubst %.S, %.o, $(asm_SOURCES:$(SOURCE_DIR)%=%)))

# Finally, the actual build targets
all: $(KERNEL)

$(BUILD_DIR)/%.o: $(SOURCE_DIR)/%.c
	@printf "\tCC %s\n" $<
	mkdir -p $(@D)
	$(CC) $(KCFLAGS) -o $@ -c $<

$(BUILD_DIR)/%.o: $(SOURCE_DIR)/%.S
	@printf "\tASM %s\n" $<
	mkdir -p $(@D)
	$(CC) $(KCFLAGS) -o $@ -c $<

$(KERNEL): $(OBJECTS)
	@printf "\tCCLD %s\n" $@
	mkdir -p $(@D)
	$(LD) $(KLINKFLAGS) -T $(SCDIR)/arch/$(ARCH)/kernel.ld -o $@ $(OBJECTS)

$(IMAGE): $(KERNEL) $(SOURCE_DIR)/root/limine.cfg
	rm -f $(IMAGE)
	dd if=/dev/zero bs=1M count=0 seek=64 of=$(IMAGE)
	parted -s $(IMAGE) mklabel gpt
	parted -s $(IMAGE) mkpart ESP fat32 2048s 100%
	parted -s $(IMAGE) set 1 esp on
	@srcdir@/3rdparty/limine/limine-deploy $(IMAGE)
	sudo losetup -f >lpdev
	sudo losetup -Pf $(IMAGE)
	sudo mkfs.fat -F 32 `cat lpdev`p1
	mkdir -p mountdir
	sudo mount `cat lpdev`p1 mountdir
	sudo mkdir -p mountdir/EFI/BOOT
	sudo mkdir -p mountdir/boot
	sudo cp $(KERNEL) $(SOURCE_DIR)/root/limine.cfg mountdir/boot/
	sudo cp @srcdir@/3rdparty/limine/limine.sys mountdir/
	sudo cp @srcdir@/3rdparty/limine/BOOTX64.EFI mountdir/EFI/BOOT/
	sudo cp $(SOURCE_DIR)/3rdparty/Sabaton/BOOTAA64.efi mountdir/EFI/BOOT/
	sudo cp mountdir/boot/nxkern mountdir/kernel.elf
	sync
	sudo umount mountdir
	sudo losetup -d `cat lpdev`
	sudo rm -rf lpdev mountdir

# Header dependencies
override HEADER_DEPS := $(addprefix $(BUILD_DIR), $(patsubst %.c, %.d, $(kern_SOURCES:$(SOURCE_DIR)%=%)))
override HEADER_DEPS += $(addprefix $(BUILD_DIR), $(patsubst %.S, %.d, $(asm_SOURCES:$(SOURCE_DIR)%=%)))
-include $(HEADER_DEPS)

# Miscellaneous Targets
.PHONY: clean distclean maintainer-clean dist install install-strip
clean: 
	rm -f $(KERNEL) $(OBJECTS) $(HEADER_DEPS)

distclean: clean
	rm -f $(BUILD_DIR)/config.* $(IMAGE) $(BUILD_DIR)/Makefile
	rm -rf $(BUILD_DIR)/.tmpinc

maintainer-clean: distclean
	rm -rf $(SOURCE_DIR)/3rdparty $(SOURCE_DIR)/build-aux configure *'~' 
	rm -rf $(SOURCE_DIR)/install-sh $(SOURCE_DIR)/autom4te*

dist:
	rm -rf "ninex-$(VERSION)"
	mkdir -p "ninex-$(VERSION)"
	cp -r @srcdir@/.git "ninex-$(VERSION)"/
	cd "ninex-$(VERSION)" && git checkout .
	cd "ninex-$(VERSION)" && ./bootstrap
	cd "ninex-$(VERSION)" && echo $(VERSION) >.version
	rm -rf "ninex-$(VERSION)/.git"
	rm -rf "ninex-$(VERSION)/autom4te.cache"
	tar -zcf $(BUILD_DIR)/"ninex-$(VERSION).tar.gz" "ninex-$(VERSION)"
	rm -rf "ninex-$(VERSION)"

install:
	@INSTALL@ -d "$(DESTDIR)/boot"
	@INSTALL@ $(KERNEL) "$(DESTDIR)/boot"

install-strip:
	@INSTALL@ -d "$(DESTDIR)/boot"
	@INSTALL@ -s $(KERNEL) "$(DESTDIR)/boot"

# Run Targets
.PHONY: run run-kvm

override QEMU_FLAGS += -smp `nproc` -m 1G -drive file=$(IMAGE),if=none,id=nvmdev -device nvme,serial=fa01fa02,drive=nvmdev

ifeq ($(ARCH), aarch64)
	override QEMU_FLAGS += -smp 8 -M virt -serial stdio -device ramfb -cpu cortex-a72 -kernel $(KERNEL)
	override QEMU_FLAGS += -drive if=pflash,format=raw,file=$(SOURCE_DIR)/3rdparty/Sabaton/Sabaton_virt_aarch64.elf.bin,readonly=on
else ifeq ($(ARCH), x86_64)
	override QEMU_FLAGS += -M q35 -cpu qemu64,+rdtscp -bios $(SOURCE_DIR)/3rdparty/OVMF/X64/OVMF.fd 
	override QEMU_FLAGS += -smp `nproc` -debugcon stdio
endif

run: $(IMAGE)
	qemu-system-$(ARCH) $(QEMU_FLAGS)	

run-kvm: $(IMAGE)
	qemu-system-$(ARCH) --enable-kvm $(QEMU_FLAGS)

